# -*- coding: utf-8 -*-
import pandas as pd
import os
import sys

# Danh s√°ch header chu·∫©n
EXPECTED_HEADERS = [
    "SO#", "Container type", "Container NO", "Seal NO", "QTY", "CTN", "No of Package",
    "Total No of Package", "N.W.", "GW", "CBM", "UN Type", "HTS CODE", "END BYR PO",
    "TTI MODEL", "CUST MODEL", "OFIS LN NBR", "OFIS SHIPMENT NBR", "OFIS LINE ID",
    "CSR Number", "Desc.of Goods"
]

def choose_input_file():
    """H·ªèi ng∆∞·ªùi d√πng nh·∫≠p ƒë∆∞·ªùng d·∫´n file"""
    while True:
        file_path = input("üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n file CSV ho·∫∑c Excel: ").strip('"').strip()
        if os.path.exists(file_path):
            return file_path
        else:
            print("‚ùå L·ªói: File kh√¥ng t·ªìn t·∫°i. Vui l√≤ng nh·∫≠p l·∫°i!")

def choose_excel_sheet(file_path):
    """H·ªèi ng∆∞·ªùi d√πng ch·ªçn sheet khi m·ªü Excel"""
    xls = pd.ExcelFile(file_path, engine="openpyxl")
    sheets = xls.sheet_names

    print("\nüìå Danh s√°ch c√°c sheet trong file:")
    for i, sheet in enumerate(sheets, start=1):
        print(f"   {i}. {sheet}")

    choice = input("\nüîπ Nh·∫≠p s·ªë th·ª© t·ª± sheet mu·ªën ƒë·ªçc (Enter ƒë·ªÉ ch·ªçn sheet ƒë·∫ßu ti√™n): ").strip()

    if choice == "":
        return sheets[0]

    if choice.isdigit() and 1 <= int(choice) <= len(sheets):
        return sheets[int(choice) - 1]

    print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. M·∫∑c ƒë·ªãnh ƒë·ªçc sheet ƒë·∫ßu ti√™n.")
    return sheets[0]

def find_header_row(file_path, ext, sheet_name=None):
    """
    X√°c ƒë·ªãnh d√≤ng header trong file Excel ho·∫∑c CSV
    Tr·∫£ v·ªÅ index c·ªßa header
    """
    if ext == ".csv":
        preview_df = pd.read_csv(file_path, encoding="utf-8-sig", header=None, nrows=30)
    else:
        preview_df = pd.read_excel(file_path, sheet_name=sheet_name, engine="openpyxl", header=None, nrows=30)

    for i in range(len(preview_df)):
        row_values = preview_df.iloc[i].astype(str).str.strip().tolist()
        # N·∫øu s·ªë c·ªôt tr√πng kh·ªõp v√† c√°c header ch√≠nh xu·∫•t hi·ªán trong d√≤ng n√†y
        matches = [h for h in EXPECTED_HEADERS if h in row_values]
        if len(matches) >= 5:  # Ch·ªâ c·∫ßn t√¨m th·∫•y ‚â•5 header tr√πng l√† ƒë·ªß tin t∆∞·ªüng
            return i

    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y header ph√π h·ª£p. S·ª≠ d·ª•ng d√≤ng ƒë·∫ßu ti√™n l√†m header.")
    return 0

def process_file(input_file, output_file):
    try:
        ext = os.path.splitext(input_file)[1].lower()

        # Ch·ªçn sheet n·∫øu l√† Excel
        sheet_name = None
        if ext in [".xls", ".xlsx"]:
            sheet_name = choose_excel_sheet(input_file)

        # T√¨m d√≤ng header ch√≠nh x√°c
        header_row = find_header_row(input_file, ext, sheet_name)

        # ƒê·ªçc file, b·ªè qua c√°c d√≤ng tr∆∞·ªõc header
        if ext == ".csv":
            df = pd.read_csv(input_file, encoding="utf-8-sig", skiprows=header_row)
        else:
            df = pd.read_excel(input_file, sheet_name=sheet_name, engine="openpyxl", skiprows=header_row)

        # ƒê·∫∑t t√™n c·ªôt theo EXPECTED_HEADERS
        df.columns = EXPECTED_HEADERS

        print(f"\n‚úÖ ƒê√£ t√¨m th·∫•y header t·∫°i d√≤ng: {header_row + 1}")

        # Lo·∫°i b·ªè d√≤ng tr·ªëng
        df = df.dropna(how="all")

        # Ki·ªÉm tra c·ªôt b·∫Øt bu·ªôc
        required_cols = ["Container NO", "UN Type", "HTS CODE", "Desc.of Goods"]
        for col in required_cols:
            if col not in df.columns:
                print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y c·ªôt '{col}' trong file.")
                sys.exit(1)

        # ƒêi·ªÅn gi√° tr·ªã Container NO b·ªã tr·ªëng
        container_value = None
        for i in df.index:
            current_val = str(df.at[i, "Container NO"]).strip()
            if current_val and current_val.lower() != "nan":
                container_value = current_val
            elif container_value:
                df.at[i, "Container NO"] = container_value

        # Group d·ªØ li·ªáu theo Container NO
        grouped = {}
        for _, row in df.iterrows():
            container_no = str(row["Container NO"]).strip()
            grouped.setdefault(container_no, []).append(row)

        # X√≥a file output c≈© n·∫øu t·ªìn t·∫°i
        if os.path.exists(output_file):
            os.remove(output_file)

        # M·ªü file ƒë·ªÉ ghi d·ªØ li·ªáu
        with open(output_file, "w", encoding="utf-8") as f:
            for container_no, rows in grouped.items():
                container_df = pd.DataFrame(rows)
                container_df = container_df.drop_duplicates(subset=["UN Type", "Desc.of Goods"])

                dg_df = container_df[container_df["UN Type"].str.upper() == "DG"]
                nondg_df = container_df[container_df["UN Type"].str.upper() == "NONDG"]
                general_df = container_df[container_df["UN Type"].str.upper() == "GENERAL"]

                # --- X·ª≠ l√Ω DG ---
                if not dg_df.empty:
                    f.write("cont: {}\n".format(container_no))
                    for desc in dg_df["Desc.of Goods"].dropna().tolist():
                        f.write("{}\n".format(desc))
                    hs_codes = dg_df["HTS CODE"].dropna().astype(str).unique().tolist()
                    f.write("hs code: {}\n".format(", ".join(hs_codes)))
                    f.write("DG GOODS\n")
                    f.write("UN No: UN3481\n")
                    f.write("Technical name: LITHIUM ION BATTERIES ARE PACKED WITH EQUIPMENT\n")
                    f.write("IMO/CRF class: 9\n")
                    f.write("UN PACKING CODE: 4G\n")
                    f.write("---------------------------------\n")

                # --- X·ª≠ l√Ω NONDG ---
                if not nondg_df.empty:
                    f.write("cont: {}\n".format(container_no))
                    for desc in nondg_df["Desc.of Goods"].dropna().tolist():
                        f.write("{}\n".format(desc))
                    hs_codes = nondg_df["HTS CODE"].dropna().astype(str).unique().tolist()
                    f.write("hs code: {}\n".format(", ".join(hs_codes)))
                    f.write("NONDG GOODS CONTAIN BATTERY\n")
                    f.write("---------------------------------\n")

                # --- X·ª≠ l√Ω GENERAL ---
                if not general_df.empty:
                    f.write("cont: {}\n".format(container_no))
                    for desc in general_df["Desc.of Goods"].dropna().tolist():
                        f.write("{}\n".format(desc))
                    hs_codes = general_df["HTS CODE"].dropna().astype(str).unique().tolist()
                    f.write("hs code: {}\n".format(", ".join(hs_codes)))
                    f.write("GENERAL GOODS WITHOUT BATTERY\n")
                    f.write("---------------------------------\n")

        print(f"\n‚úÖ ƒê√£ x·ª≠ l√Ω xong! File xu·∫•t: {output_file}")

    except Exception as e:
        print("‚ùå L·ªói:", e)


if __name__ == "__main__":
    input_file = choose_input_file()
    base_dir = os.path.dirname(os.path.abspath(input_file))
    file_name = os.path.splitext(os.path.basename(input_file))[0]
    output_file = os.path.join(base_dir, f"{file_name}_output.txt")
    process_file(input_file, output_file)

