import os
import sqlite3
import pandas as pd
import warnings
from openpyxl import load_workbook

# ·∫®n c√°c c·∫£nh b√°o c·ªßa openpyxl
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

DB_NAME = "master_data.db"
TABLE_NAME = "master_data"


def show_menu():
    print("\n=== MENU CH√çNH ===")
    print("1. Kh·ªüi t·∫°o master data")
    print("2. Fill data")
    print("0. Tho√°t")
    return input("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ").strip()


def init_master_data():
    try:
        file_path = input("Nh·∫≠p ho·∫∑c k√©o th·∫£ file master data Excel v√†o ƒë√¢y: ").strip().strip('"').strip("'")

        if not os.path.exists(file_path):
            print("‚ùå File kh√¥ng t·ªìn t·∫°i.")
            return

        print("ƒêang ƒë·ªçc file Excel...")
        excel = pd.ExcelFile(file_path)
        all_data = []

        for sheet_name in excel.sheet_names:
            df = excel.parse(sheet_name)

            required_cols = {
                'Carrier Bkg no.': 'D',
                'Job no.': 'E',
                'Shipper Name': 'F',
                'Carrier': 'N',
                'Vessel name': 'AD',
                'Origin ETD': 'AF',
                'New ETD': 'AG',
                'Status': 'H'
            }

            missing = [c for c in required_cols.keys() if c not in df.columns]
            if missing:
                print(f"‚ö†Ô∏è Sheet '{sheet_name}' b·ªã thi·∫øu c·ªôt: {missing}, b·ªè qua.")
                continue

            # √âp ki·ªÉu & l·ªçc d·ªØ li·ªáu
            df['Status'] = df['Status'].astype(str).str.lower()
            df = df[~df['Status'].isin(['cancel', 'shipper cancel'])]
            df = df[df['Carrier Bkg no.'].notna() & (df['Carrier Bkg no.'].astype(str).str.strip() != '')]

            if not df.empty:
                selected = df[list(required_cols.keys())]
                all_data.append(selected)

        if not all_data:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá trong file.")
            return

        master_df = pd.concat(all_data, ignore_index=True)
        master_df = master_df.fillna('').astype(str)

        # Ghi d·ªØ li·ªáu v√†o SQLite
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(f"DROP TABLE IF EXISTS {TABLE_NAME}")
        conn.commit()

        master_df.to_sql(TABLE_NAME, conn, index=False, if_exists='replace', dtype={col: 'TEXT' for col in master_df.columns})
        cursor.execute(f"CREATE INDEX IF NOT EXISTS idx_carrier_bkg_no ON {TABLE_NAME}(`Carrier Bkg no.`)")
        conn.commit()
        conn.close()

        print("‚úÖ Kh·ªüi t·∫°o master data ho√†n t·∫•t.")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è ƒê√£ h·ªßy qu√° tr√¨nh kh·ªüi t·∫°o (Ctrl + C). Quay l·∫°i menu...")
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh init master data: {e}")


def fill_data():
    try:
        if not os.path.exists(DB_NAME):
            print("‚ö†Ô∏è Ch∆∞a c√≥ master data. H√£y kh·ªüi t·∫°o tr∆∞·ªõc (ch·ªçn option 1).")
            return

        file_path = input("Nh·∫≠p ho·∫∑c k√©o th·∫£ file data c·∫ßn x·ª≠ l√Ω: ").strip().strip('"').strip("'")

        if not os.path.exists(file_path):
            print("‚ùå File kh√¥ng t·ªìn t·∫°i.")
            return

        import openpyxl

        # ƒê·ªçc file input
        wb = openpyxl.load_workbook(file_path)
        sheets = wb.sheetnames

        print("\nüìÑ Danh s√°ch sheet:")
        for i, s in enumerate(sheets, start=1):
            print(f"{i}. {s}")

        choice = input("Ch·ªçn sheet c·∫ßn x·ª≠ l√Ω: ").strip()
        if not choice.isdigit() or int(choice) < 1 or int(choice) > len(sheets):
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
            return

        sheet_name = sheets[int(choice) - 1]
        ws = wb[sheet_name]

        # M·ªü k·∫øt n·ªëi SQLite
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()

        print(f"üöÄ ƒêang x·ª≠ l√Ω sheet: {sheet_name} ...")

        # L·∫•y header ƒë·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ c·ªôt
        headers = {cell.value: idx for idx, cell in enumerate(ws[1], start=1)}

        # Ki·ªÉm tra c·ªôt BK# c√≥ t·ªìn t·∫°i kh√¥ng
        if "BK #" not in headers:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt 'BK #' trong sheet.")
            return

        bk_col = headers["BK #"]
        line_col = headers.get("LINE")
        job_col = headers.get("JOB")
        vessel_col = headers.get("VESSEL")
        branch_col = headers.get("BRANCH")
        etd_col = headers.get("ETD")

        total_rows = ws.max_row
        for row_idx in range(2, total_rows + 1):
            bk_value = ws.cell(row=row_idx, column=bk_col).value

            if not bk_value or str(bk_value).strip() == "":
                # BK # tr·ªëng => b·ªè qua
                continue

            bk_value = str(bk_value).strip()

            # Truy v·∫•n trong master data
            cursor.execute(f"SELECT * FROM {TABLE_NAME} WHERE `Carrier Bkg no.` = ?", (bk_value,))
            rows = cursor.fetchall()

            if len(rows) == 0:
                print(f"‚ö†Ô∏è BK # : {bk_value} kh√¥ng t√¨m th·∫•y trong master data.")
                continue
            elif len(rows) > 1:
                print(f"‚ö†Ô∏è BK # : {bk_value} ƒëang b·ªã tr√πng l·∫∑p trong master data, ph√°t hi·ªán {len(rows)} d√≤ng. S·ª≠ d·ª•ng d√≤ng ƒë·∫ßu ti√™n.")

            row = rows[0]
            col_names = [desc[0] for desc in cursor.description]
            data = dict(zip(col_names, row))

            # T√≠nh to√°n ETD
            etd_value = ""
            origin_etd = data.get("Origin ETD", "").strip()
            new_etd = data.get("New ETD", "").strip()

            if origin_etd and not new_etd:
                etd_value = origin_etd
            elif origin_etd and new_etd:
                etd_value = new_etd

            # C·∫≠p nh·∫≠t t·ª´ng √¥ t∆∞∆°ng ·ª©ng
            if line_col: ws.cell(row=row_idx, column=line_col).value = data.get("Carrier", "")
            if job_col: ws.cell(row=row_idx, column=job_col).value = data.get("Job no.", "")
            if vessel_col: ws.cell(row=row_idx, column=vessel_col).value = data.get("Vessel name", "")
            if branch_col: ws.cell(row=row_idx, column=branch_col).value = data.get("Shipper Name", "")
            if etd_col: ws.cell(row=row_idx, column=etd_col).value = etd_value

        # L∆∞u l·∫°i file g·ªëc
        wb.save(file_path)
        conn.close()
        print(f"‚úÖ Ho√†n t·∫•t fill data v√† ghi ƒë√® v√†o file g·ªëc: {file_path}")

    except KeyboardInterrupt:
        print("\nüõë Qu√° tr√¨nh b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng (Ctrl + C). Quay l·∫°i menu ch√≠nh...")
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh fill data: {e}")



def main():
    try:
        while True:
            choice = show_menu()
            if choice == "1":
                init_master_data()
            elif choice == "2":
                fill_data()
            elif choice == "0":
                print("üëã Tho√°t ch∆∞∆°ng tr√¨nh. T·∫°m bi·ªát!")
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i.")
    except KeyboardInterrupt:
        print("\nüëã Tho√°t ch∆∞∆°ng tr√¨nh b·∫±ng Ctrl + C. T·∫°m bi·ªát!")


if __name__ == "__main__":
    main()
